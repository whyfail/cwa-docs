import{_ as e,c as t,o as r,a2 as o}from"./chunks/framework.C94oF1kp.js";const p=JSON.parse('{"title":"React 模板","description":"","frontmatter":{"sidebar_position":3,"keywords":["create-wl-app","开箱即用","脚手架","vite","React","Vue3","前端","前端框架","前端开发","前端开发工具"]},"headers":[],"relativePath":"core/React模板.md","filePath":"core/React模板.md"}'),a={name:"core/React模板.md"},c=o('<h1 id="react-模板" tabindex="-1">React 模板 <a class="header-anchor" href="#react-模板" aria-label="Permalink to &quot;React 模板&quot;">​</a></h1><p><a href="https://gitee.com/whyfail/vite_react_init" target="_blank" rel="noreferrer"><img src="https://gitee.com/whyfail/vite_react_init/widgets/widget_card.svg?colors=4183c4,ffffff,ffffff,e3e9ed,666666,9b9b9b" alt="小磊丶同学/vite_react_init"></a></p><h2 id="兼容性" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性" aria-label="Permalink to &quot;兼容性&quot;">​</a></h2><ul><li>浏览器语法兼容性以 <code>@vitejs/plugin-legacy</code> 配置为准；</li><li>CSS 兼容性，项目中都采用了 <code>autoprefixer</code> 作为自动添加各个浏览器 CSS 前缀，配置统一是在 <code>vite.config.js</code> 中配置； <ul><li>在<strong>React</strong>项目中，因为采用了 <code>react-jss</code> 作为样式库，所以另外添加了 <code>react-jss</code> 的 <code>jss-plugin-vendor-prefixer</code> 插件，作为浏览器 CSS 样式兼容处理，配置位置在：<a href="https://gitee.com/whyfail/vite_react_init/blob/master/src/common/common-jss-plugin.js" target="_blank" rel="noreferrer">src/common/common-jss-plugin.js</a>；</li></ul></li></ul><h2 id="页面适配方案" tabindex="-1">页面适配方案 <a class="header-anchor" href="#页面适配方案" aria-label="Permalink to &quot;页面适配方案&quot;">​</a></h2><ul><li>移除适配方法在<a href="/log/2023-10-17.html">这里</a></li><li>统一采用的都用的是：<code>postcss-pxtorem</code> 这个插件来实现 <code>px</code> 转 <code>rem</code> 来做页面适配方案； <ul><li>在<strong>React</strong>项目中，因为采用了 <code>react-jss</code> ，是 <code>CSS-In-JS</code> 方案，所以无法采用 <code>postcss-pxtorem</code> 来实现单位转换，这里我手写了个单位转换插件，并挂载到了 <code>react-jss</code> 上，插件位置在：<a href="https://gitee.com/whyfail/vite_react_init/blob/master/src/common/common-jss-plugin.js" target="_blank" rel="noreferrer">src/common/common-jss-plugin.js</a></li></ul></li><li>改变窗口大小时重新设置 <code>rem</code> 的方法是在 <a href="https://gitee.com/whyfail/vite_react_init/blob/master/src/common/common-set-rem.js" target="_blank" rel="noreferrer">src/common/common-set-rem.js</a> 文件中，然后在 <a href="https://gitee.com/whyfail/vite_react_init/blob/master/src/App.jsx" target="_blank" rel="noreferrer">src/App.jsx</a> 中调用； <ul><li>因为项目中采用的 UI 库是 <code>antd5</code> ，而 <code>antd5</code> 库采用的也是 <code>CSS-In-JS</code> 方案，所以<code>postcss-pxtorem</code> 这个插件也是没有办法修改它的样式单位，所以在 <a href="https://gitee.com/whyfail/vite_react_init/blob/master/src/App.jsx" target="_blank" rel="noreferrer">src/App.jsx</a> 中进行手动修改 <code>antd5</code> 样式单位。</li></ul></li></ul><h2 id="方便开发的工具" tabindex="-1">方便开发的工具 <a class="header-anchor" href="#方便开发的工具" aria-label="Permalink to &quot;方便开发的工具&quot;">​</a></h2><ul><li><code>react-dev-inspector</code>：只需单击一下即可直接从浏览器跳转到本地 IDE 代码 React 组件，配置是在 <a href="https://gitee.com/whyfail/vite_react_init/blob/master/src/main.jsx" target="_blank" rel="noreferrer">src/main.jsx</a> 文件中，运行项目后，按住<code>control + y</code> 选中元素点击，即可打开 IDE 对应的代码； <img src="https://react-dev-inspector.zthxxx.me/images/inspect.gif" alt="dev-inspect"></li><li><code>ahooks</code>: 由阿里出品的一套高质量可靠的 React Hooks 库，里面包含了非常多实用的 <code>Hooks</code> ,其中 <a href="https://ahooks.js.org/zh-CN/hooks/use-request/index" target="_blank" rel="noreferrer">useRequest</a> 是一个强大的异步数据管理的 Hooks，React 项目中的网络请求场景使用 <code>useRequest</code> 就够了；</li><li><code>axios</code>: 请求库，在<a href="https://gitee.com/whyfail/vite_react_init/blob/master/src/apis/index.js" target="_blank" rel="noreferrer">src/apis/index.js</a>中做了简单的配置，并在<a href="https://gitee.com/whyfail/vite_react_init/blob/master/src/apis/api_user.js" target="_blank" rel="noreferrer">src/apis/api_user.js</a>中提供了实用示例；</li><li><s><code>mobx</code>: React 项目中采用了 <code>Mobx</code> 作为全局状态管理库，使用起来也非常的简单易用，在<a href="https://gitee.com/whyfail/vite_react_init/blob/master/src/store/storeOther.js" target="_blank" rel="noreferrer">src/store/storeOther.js</a> 文件中给出了示例状态模块化，统一由<a href="https://gitee.com/whyfail/vite_react_init/blob/master/src/store/index.js" target="_blank" rel="noreferrer">src/store/index.js</a> 文件中导出使用，在 <a href="https://gitee.com/whyfail/vite_react_init/blob/master/src/components/index.jsx" target="_blank" rel="noreferrer">src/components/index.jsx</a>文件中给出了使用示例，注意点就是一定要用 <code>observer</code> 来包括组件，达到组件响应式。</s></li><li><code>Recoil</code>: React 项目中采用了 <code>Recoil</code> 作为全局状态管理库，Recoil 库同样使用起来很简单，上手简单，和使用 useState 基本一样，所以没有什么使用上的压力，使用方式可以参考 <a href="/log/2023-05-24.html">这里</a>。</li><li><code>react-jss</code>：一个 <code>CSS-IN-JSS</code> 库，因为 React 没有像 Vue 中的 <code>&lt;style scoped&gt;</code> 语法，没法隔离样式，所以采用了 <code>react-jss</code> 库来实现同一文件中写样式并样式隔离，在 <a href="https://gitee.com/whyfail/vite_react_init/blob/master/src/components/index.jsx" target="_blank" rel="noreferrer">src/components/index.jsx</a> 文件中给出了示例代码。</li></ul>',8),s=[c];function i(l,n,d,m,h,_){return r(),t("div",null,s)}const b=e(a,[["render",i]]);export{p as __pageData,b as default};
